import err;
import texp;
import bytecode;
import util;

export {
	// Translate the program to the bytecode. In case of errors None is returned.
	prog2bc(p: TExp, err: Err) -> Maybe<BcCode>;
}

prog2bc(prog: TExp, err: Err) -> Maybe<BcCode> {
	// Collect all variables, used in a program
	vars = set2array(texpVars(makeSet(), prog));
	var2ind = foldi(vars, makeTree(), \i, ac, v -> setTree(ac, v, i));
	var_ind = \v -> switch (lookupTree(var2ind, v)) {
		Some(i): i;
		None(): {
			err.report("var `" + v + "` was not declared");
			-1;
		}
	}
	bytecode = stat2bc(prog, var_ind, err);
	if (isOk(err)) {
		Some(BcCode(length(vars), bytecode));
	} else {
		None();
	}
}


// Recursively produce a sequence of commands, which have the same semantics, as a program
stat2bc(s: TExp, var_ind: (string) -> int, err: Err) -> [BcComm] {
	switch (s) {
		TAssign(v, e): {
			// Process the expression, then pop the value into the 'v' variable slot in the execution engine.
			arrayPush(
				exp2bc(e, var_ind, err),
				BcPop(var_ind(v))
			);
		}
		TIf(c, pos, neg): {
			if (neg == TSeq([])) {
				pos_code = stat2bc(pos, var_ind, err);
				// At first, evaluate the 'if' condition.
				// Then check, if a value on the stack top is true: 
				//   1) if it is true, just keep on execution 'pos' statement
				//   2) otherwise jump to the end of all this bytecode segment
				concat(
					arrayPush(
						exp2bc(c, var_ind, err),
						BcIfNot(length(pos_code) + 1)
					),
					concat(
						pos_code,
						stat2bc(neg, var_ind, err)
					)
				);
			} else {
				pos_code = stat2bc(pos, var_ind, err);
				neg_code = stat2bc(neg, var_ind, err);
				// At first, evaluate the 'if' condition.
				// Then check, if a value on the stack top is true: 
				//   1) if it is true, just keep on execution 'pos' statement,
				//     until the end of 'pos' is reached. At this point jump
				//     to the end of this bytecode fragment
				//   2) otherwise jump to the end of all this bytecode segment
				concat(
					arrayPush(
						exp2bc(c, var_ind, err),
						BcIfNot(length(pos_code) + 2)
					),
					concat(
						arrayPush(pos_code, BcGoto(length(neg_code) + 1)),
						neg_code
					)
				);
			}
		}
		TWhile(c, s1): {
			cond_code = exp2bc(c, var_ind, err);
			s1_code = stat2bc(s1, var_ind, err);
			// At first, evaluate the 'while' condition.
			// Then check, if a value on the stack top is true: 
			//   1) if it is true, just keep on execution 's1' statement,
			//     until the end of 's1' is reached. At this point jump
			//     back to the very beginning of this bytecode fragment
			//   2) otherwise jump to the end of all this bytecode segment
			concat(
				arrayPush(
					cond_code,
					BcIfNot(length(s1_code) + 2)
				),
				arrayPush(
					s1_code,
					BcGoto(-(length(s1_code) + length(cond_code) + 1))
				)
			);
		}
		TSeq(es): {
			// Concat all translated fragments corresponding to the sequence 'es' -
			// they will be executed sequentially.
			fold(es, [], \acc, x -> concat(acc, stat2bc(x, var_ind, err)));
		}
		TPrint(e): {
			// Evaluate the expression, then pop the value from the stack and put it into the output sink.
			arrayPush(exp2bc(e, var_ind, err), BcPrint());
		}
		TRead(v, t): {
			// Depending on the type of a variable, take the value from the input and pass it to the
			// local value slot, corresponding to the variable 'v'.
			switch (t) {
				TypeBool():   [BcReadBool(var_ind(v))];
				TypeInt():    [BcReadInt(var_ind(v))];
				TypeString(): [BcReadString(var_ind(v))];
				default: {
					err.report("read type is bool, int or string, met:\n" + type2s(t));
					[];
				}
			}
		}
		default: {
			err.report("a statement is expected, met:\n" + texp2s(s));
			[];
		}
	}
}

// This function makes a conversion of a tree-like AST nodes of an expression
// to the RPN-like (Reverse Polish Notation) sequence of commands, which operate
// on the stack of the execution engine.
exp2bc(e: TExp, var_ind: (string) -> int, err: Err) -> [BcComm] {
	switch (e) {
		TCall(op, args,__): {
			arrayPush(
				// Note! here arguments are reversed (i.e. foldr function is used).
				// Otherwise the order of oerations will be reversed during the execution.
				foldr(args, [], \acc, arg -> concat(acc, exp2bc(arg, var_ind, err))),
				BcStackOp(op)
			);
		}
		TVar(v,__): [BcPush(var_ind(v))]; // Push the value of a local variable 'v' onto the stack
		TInt(i):    [BcConstInt(i)];
		TBool(b):   [BcConstBool(b)];
		TString(s): [BcConstString(s)];
		default: {
			err.report("statement is met in expression:\n" + texp2s(e) + "\n" + toString(e)); [];
		}
	}
}

