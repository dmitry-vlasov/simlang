import string_utils;
import text/blueprint;
import exp;
import texp;
import bc;

export {

// String representation of type
type2s(t: Type) -> string;

// Make the string representation of a (typed) expression (operation inverse to parsing)
exp2s(e: Exp) -> string;
texp2s(e: TExp) -> string;

// String representation of a bytecode
bcode2s(prog: BcCode) -> string;
comm2s(comm: BcComm) -> string;

// Gather all variables from TExp
texpVars(acc: Set<string>, e: TExp) -> Set<string>;

}

type2s(t: Type) -> string {
	switch (t) {
		TypeBool():   "bool";
		TypeInt():    "int";
		TypeString(): "string";
		TypeErr():    "<error type>";
	}
}

exp2s(e: Exp) -> string {
	switch (e) {
		Assign(var, x): {
			var +  " = " + exp2s(x);
		}
		Seq(es): {
			if (length(es) == 0) "" else
			if (length(es) == 1) exp2s(es[0]) else "{\n" + 
				strIndent(superglue(es, exp2s, "\n")) + 
			"\n}";
		}
		Call(op, args): {
			if (length(args) == 0) op else
			if (length(args) == 1) {
				op + exp2s(args[0]);
			} else {
				"(" + superglue(args, exp2s, " " + op + " ") + ")";
			}
		}
		While(cond, e1): {
			"while " + exp2s(cond) + " " + exp2s(e1);
		}
		If(cond, pos, neg): {
			if (neg == Seq([])) {
				"if " + exp2s(cond) + " " + exp2s(pos);
			} else {
				"if " + exp2s(cond) + " " + exp2s(pos) + " else " + exp2s(neg);
			}
		}
		Array(vals): {
			"[" + superglue(vals, exp2s, ", ") + "]";
		}
		Print(e1): {
			"print " + exp2s(e1);
		}
		Read(v): {
			"read " + v;
		}
		Var(v): v;
		Int(i): i2s(i)
		Bool(b): b2s(b);
		String(s): "\"" + s + "\"";
	}
}

texp2s(e: TExp) -> string {
	switch (e) {
		TAssign(var, x): {
			var + ": " + type2s(expType(x)) + " = " + texp2s(x);
		}
		TSeq(es): {
			if (length(es) == 0) "" else
			if (length(es) == 1) texp2s(es[0]) else "{\n" + 
				strIndent(superglue(es, texp2s, "\n")) + 
			"\n}";
		}
		TCall(op, args,__): {
			if (length(args) == 0) op else
			if (length(args) == 1) {
				if (op == "not") "!" + texp2s(args[0]) else
				if (op == "neg") "-" + texp2s(args[0]) else
				op + "(" + texp2s(args[0]) + ")";
			} else {
				"(" + superglue(args, texp2s, " " + op + " ") + ")";
			}
		}
		TWhile(cond, e1): {
			"while " + texp2s(cond) + " " + texp2s(e1);
		}
		TIf(cond, pos, neg): {
			if (neg == TSeq([])) {
				"if " + texp2s(cond) + " " + texp2s(pos);
			} else {
				"if " + texp2s(cond) + " " + texp2s(pos) + " else " + texp2s(neg);
			}
		}
		TArray(vals): {
			"[" + superglue(vals, texp2s, ", ") + "]";
		}
		TPrint(e1): {
			"print " + texp2s(e1);
		}
		TRead(v, t): {
			"read " + v + ": " + type2s(t);
		}
		TVar(v,__): v;
		TInt(i): i2s(i)
		TBool(b): b2s(b);
		TString(s): "\"" + s + "\"";
	}
}

bcode2s(prog: BcCode) -> string {
	"locals: " + i2s(prog.locals) + "\n" + 
	"bytecode: [\n" +
		supergluei(prog.code, \i, c -> "\t" + i2s(i) + ": " + comm2s(c), "\n") + 
	"\n]";
}

comm2s(comm: BcComm) -> string {
	switch (comm) {
		BcPush(i):        "push " + i2s(i);
		BcPop(i):         "pop " + i2s(i);
		BcPrint():        "print";
		BcReadBool(i):    "read bool " + i2s(i);
		BcReadInt(i):     "read int " + i2s(i);
		BcReadString(i):  "read string " + i2s(i);
		BcIfNot(sh):      "ifnot goto +" + i2s(sh);
		BcGoto(sh):       "goto " + i2s(sh);
		BcConstBool(b):   "const bool " + b2s(b);
		BcConstInt(i):    "const int " + i2s(i);
		BcConstString(s): "const string \"" + s + "\"";
		BcOp(op, a):      "op " + op + ": " + i2s(a);
	}
}

texpVars(acc: Set<string>, e: TExp) -> Set<string> {
	switch (e) {
		TAssign(v,__):     insertSet(acc, v);
		TSeq(stats):       fold(stats, acc, texpVars);
		TWhile(__,body):   texpVars(acc, body);
		TIf(__, pos, neg): texpVars(texpVars(acc, pos), neg);
		default: acc;
	}
}
