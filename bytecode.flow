import type;
import ds/tuples;

export {

// Bytecode (stack-based) commands.
BcComm ::=
	BcPush, BcPop, BcPrint, BcReadBool, BcReadInt, BcReadString, BcIfNot,
	BcGoto, BcStackOp, BcConstBool, BcConstInt, BcConstString;

	// stack <-> locals operations
	BcPush(i: int); // Pushes the value of `i`-th variable onto the stack.
	BcPop(i: int);  // Pops the top of the stack into the `i`-th variable.

	// Control flow operations
	BcGoto(sh: int);  // Unconditional jump: shifts the program counter by `sh`
	BcIfNot(sh: int); // Conditional jump: shifts the program counter, if boolean value on a stack is false (sic!).

	// input / output commands
	BcReadBool(i: int);    // Sets the `i`-th variable value to the boolean value from input
	BcReadInt(i: int);     // Sets the `i`-th variable value to the integer value from input
	BcReadString(i: int);  // Sets the `i`-th variable value to the string value from input
	BcPrint();             // Prints the value, popped from the top of the stack

	// Stack operation. `op` denotes the exact operation.
	BcStackOp(op: string); // op may be: '+' , '-', '*', 'i2s',... etc.

	// List of all operators, which may be in BcStackOp. The second component of a pair is arity of an operation.
	bytecode_ops = [
		Pair("not", 1), Pair("neg", 1), Pair("+", 2),   Pair("-", 2),   Pair("*", 2),   Pair("/", 2),   Pair("%", 2), 
		Pair("==", 2),  Pair("!=", 2),  Pair("<=", 2),  Pair("<", 2),   Pair(">=", 2),  Pair(">", 2),   Pair("&&", 2),
		Pair("||", 2),  Pair("i2b", 1), Pair("i2s", 1), Pair("b2s", 1), Pair("b2i", 1), Pair("s2i", 1), Pair("s2b", 1),
	];

	// Constants (push onto the stack):
	BcConstBool(b: bool);
	BcConstInt(v: int);
	BcConstString(s: string);

// The whole bytecode representation
BcCode(
	numLocals: int, // number of local variables, used in a program
	code: [BcComm], // sequence of commands
);

}
