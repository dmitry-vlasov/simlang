import net/url_parameter;
import fs/filesystem;
import parser;
import typecheck;
import exp2bc;
import binary;

main() {
	file_param = getUrlParameter("file");
	file = changeFileExt(file_param, ".sl");
	if (file_param == "") {
		println(help + "\nno file to compile. Please pass file name with file=<name> option.")
	} else if (!fileExists(file)) {
		println("file: " + file_param + " don't exist.");
	} else {
		code = getFileContent(file);
		err = makeErr();
		maybeApply(parse(code, err), \prog -> {
			// The source code was successfully parsed
			if (isUrlParameterTrue("show-parsed") || isUrlParameterTrue("show-all")) {
				println("program:\n" + exp2s(prog));
			}
			maybeApply(typecheck(prog, err), \typed -> {
				// The parsed AST was successfully typed
				if (isUrlParameterTrue("show-typed") || isUrlParameterTrue("show-all")) {
					println("typed:\n" + texp2s(typed));
				}
				maybeApply(prog2bc(typed, err), \bytecode -> {
					// The typed program was successfully compiled to bytecode 
					if (isUrlParameterTrue("show-bytecode") || isUrlParameterTrue("show-all")) {
						println(bcode2s(bytecode));
					}
					outfile = if (isUrlParameterSet("out")) {
						getUrlParameter("out");
					} else {
						changeFileExt(file, ".binsl");
					}
					if (!setFileContent(outfile, bcode2binary(bytecode))) {
						println("failed to save the bytecode to: " + outfile);
					}
				});
			});
		});
	}
	quit(0);
}

help = <<
Simple language compiler. Usage:
	java -jar simc.jar <options> file=<name>

Options:
	show-parsed=1          outputs the result of parsing phase
	show-typed=1           outputs the result of typechecking phase 
	show-bytecode=1        outputs the generated bytecode
	show-all=1             all of the previous together
	out=<name>             output to a specific file.
	                       In case not set, the extension of file changes to *.binsl
>>
