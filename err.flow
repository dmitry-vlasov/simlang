import runtime;

export {
	// General error-handling struct.
	// Keeps an array of all occured errors,
	Err(
		messages: ref [string],
		report: (string) -> void
	);

	makeErr() -> Err;

	// Checks that no errors have happened yet.
	isOk(err: Err) -> bool;
}

makeErr() -> Err {
	messages = ref [];
	report = \msg -> {
		refArrayPush(messages, msg);
		println("error: " + msg);
	}
	Err(messages, report);
}

isOk(err: Err) -> bool {
	^(err.messages) == [];
}
