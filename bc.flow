import ds/array;
import runtime;
import text/blueprint;
import string_utils;
import sys/system;
import err;

export {

BcComm ::= BcPush, BcPop, BcPrint, BcRead, BcIf, BcGoto, BcBin, BcUn, BcConst;
	BcPush(i: int);
	BcPop(i: int);
	BcPrint();
	BcRead(i: int);
	BcIf(sh: int);
	BcGoto(sh: int);
	BcBin(op: string);
	BcUn(op: string);
	BcConst(v: int);

BcCode(
	vars: [string],
	code : [BcComm],
);

execBcCode(prog: BcCode, trace: bool, err: Err) -> void;

verifyBcCode(prog: BcCode, err: Err) -> bool;

bcode2s(prog: BcCode) -> string;

}

State(
	vars: [int],
	pc: int,
	stack: List<int>
);

verifyBcCode(prog: BcCode, err: Err) -> bool {
	check_i = \i, c -> if (i < 0 || i >= length(prog.vars)) err.report("illegal var index in: " + comm2s(c));
	iter(prog.code, \c -> switch (c) {
		BcPush(i): check_i(i, c);
		BcPop(i): check_i(i, c);
		BcRead(i): check_i(i, c);
		default: {}
	});
	isOk(err);
}

execBcCode(prog: BcCode, trace: bool, err: Err) -> void {
	if (verifyBcCode(prog, err)) {
		initial = State(generate(0, length(prog.vars), \__ -> 0), 0, makeList());
		if (trace) {
			println("initial state: " + state2s(initial));
		}
		ignore(for(initial,
			\s -> s.pc < length(prog.code),
			\prev -> {
				next = execComm(prog.code[prev.pc], prev, err);
				if (trace) {
					println(comm2s(prog.code[prev.pc]) + ":\n\t" + state2s(next));
				}
				next;
			}
		));
	}
}

execComm(comm:  BcComm, s: State, err: Err) -> State {
	incPc = \x -> State(x with pc = x.pc + 1);
	push = \x, v -> State(x with stack = Cons(v, x.stack));
	pop = \x -> switch (x.stack) {
		Cons(h, t): Pair(h, State(x with stack = t));
		EmptyList(): { err.report("popping empty list"); Pair(0, x); }
	}
	switch (comm) {
		BcPush(i): {
			incPc(push(s, s.vars[i]));
		}
		BcPop(i): {
			p = pop(s);
			incPc(State(p.second with vars = replace(s.vars, i, p.first)));
		}
		BcPrint(): {
			p = pop(s);
			println(p.first);
			incPc(p.second);
		}
		BcRead(i): {
			input = readUntil("\n");
			val = s2i(input);
			incPc(State(s with vars = replace(s.vars, i, val)));
		}
		BcIf(sh): {
			p = pop(s);
			State(p.second with pc = s.pc + if (p.first != 0) 1 else sh);
		}
		BcGoto(sh): {
			State(s with pc = s.pc + sh);
		}
		BcConst(v): {
			incPc(push(s, v));
		}
		BcUn(op): {
			p = pop(s);
			x = p.first;
			incPc(push(p.second, execUnOp(op, x, err)));
		}
		BcBin(op): {
			p1 = pop(s);
			x = p1.first;
			p2 = pop(p1.second);
			y = p2.first;
			incPc(push(p2.second, execBinOp(op, x, y, err)));
		}
	}
}

execUnOp(op: string, x: int, err: Err) -> int {
	if (op == "neg") -x else
	if (op == "not") {
		if (x == 0) 1 else 0;
	} else {
		err.report("unsupported unary operation: " + op); 0;
	}
}

execBinOp(op: string, x: int, y: int, err: Err) -> int {
	if (op == "+") x + y else
	if (op == "-") x - y else
	if (op == "*") x * y else
	if (op == "/") x / y else
	if (op == "%") x % y else
	if (op == "==") b2i(x == y) else
	if (op == "!=") b2i(x != y) else
	if (op == "<")  b2i(x < y) else
	if (op == "<=") b2i(x <= y) else
	if (op == ">")  b2i(x > y) else
	if (op == ">=") b2i(x >= y) else
	if (op == "&&") {
		if (x == 0 || y == 0) 0 else 1;
	} else 
	if (op == "||") {
		if (x == 0 && y == 0) 0 else 1;
	} else {
		err.report("unsupported binary operation: " + op); 0;
	}
}

bcode2s(prog: BcCode) -> string {
	"vars: [" + strGlue(prog.vars, ", ") + "]\n" + 
	"bytecode: [\n" +
		supergluei(prog.code, \i, c -> "\t" + i2s(i) + ": " + comm2s(c), "\n") + 
	"\n]";
}

comm2s(comm: BcComm) -> string {
	switch (comm) {
		BcPush(i):  "push " + i2s(i);
		BcPop(i):   "pop " + i2s(i);
		BcPrint():  "print";
		BcRead(i):  "read " + i2s(i);
		BcIf(sh):   "if, else goto +" + i2s(sh);
		BcGoto(sh): "goto " + i2s(sh);
		BcConst(v): "const " + i2s(v);
		BcUn(op):   "un " + op;
		BcBin(op):  "bin " + op;
	}
}

state2s(s: State) -> string {
	"pc = " + i2s(s.pc) + " " + 
	"vars = [" + superglue(s.vars, i2s, ", ") + "] "
	"stack = {" + superglue(list2array(s.stack), i2s, ", ") + "}";
}
