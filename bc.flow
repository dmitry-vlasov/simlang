import type;

export {

// Bytecode commands
BcComm ::=
	BcPush, BcPop, BcPrint, BcReadBool, BcReadInt, BcReadString, BcIfNot,
	BcGoto, BcOp, BcConstBool, BcConstInt, BcConstString;

	// stack <-> locals operations
	BcPush(i: int);
	BcPop(i: int);

	// Control flow operations
	BcIfNot(sh: int); // Conditional jump: shifts the program counter, if value on a stack is false.
	BcGoto(sh: int);  // Unconditional jump

	// input/output commands
	BcReadBool(i: int);
	BcReadInt(i: int);
	BcReadString(i: int);
	BcPrint();

	// Stack operations
	BcOp(op: string, arity: int); // op may be: '+' , '-', '*', 'i2s',... etc.

	// Constants (are pushed onto stack):
	BcConstBool(b: bool);
	BcConstInt(v: int);
	BcConstString(s: string);

// The whole bytecode representation
BcCode(
	locals: int,    // number of local variables, used in a program
	code: [BcComm], // sequence of commands
);

}
